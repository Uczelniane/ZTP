using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;

using System;

internal class Program
{
    private static void Main(string[] args)
    {
        string inputPath = "test.jpg";
        string outputPath = "output_filtered_bytearray.jpg";

        using var image = Image.Load<Rgb24>(inputPath);
        int width = image.Width, height = image.Height;

        byte[,] rData = new byte[width, height];
        byte[,] gData = new byte[width, height];
        byte[,] bData = new byte[width, height];

        for (int y = 0; y < height; y++)
        {
            var row = image.GetPixelRowSpan(y);
            for (int x = 0; x < width; x++)
            {
                rData[x, y] = row[x].R;
                gData[x, y] = row[x].G;
                bData[x, y] = row[x].B;
            }
        }

        float[,] filter = new float[5, 5]
        {
            { 0, 0, 1, 0, 0 },
            { 0, 1, 2, 1, 0 },
            { 1, 2, 3, 2, 1 },
            { 0, 1, 2, 1, 0 },
            { 0, 0, 1, 0, 0 }
        };

        float sum = 0;
        foreach (var f in filter) sum += f;

        byte[,] rOut = new byte[width, height];
        byte[,] gOut = new byte[width, height];
        byte[,] bOut = new byte[width, height];

        for (int y = 2; y < height - 2; y++)
        {
            for (int x = 2; x < width - 2; x++)
            {
                float r = 0, g = 0, b = 0;
                for (int fy = -2; fy <= 2; fy++)
                {
                    for (int fx = -2; fx <= 2; fx++)
                    {
                        var weight = filter[fy + 2, fx + 2];
                        r += rData[x + fx, y + fy] * weight;
                        g += gData[x + fx, y + fy] * weight;
                        b += bData[x + fx, y + fy] * weight;
                    }
                }

                rOut[x, y] = (byte)Math.Clamp(r / sum, 0, 255);
                gOut[x, y] = (byte)Math.Clamp(g / sum, 0, 255);
                bOut[x, y] = (byte)Math.Clamp(b / sum, 0, 255);
            }
        }

        using var outputImage = new Image<Rgb24>(width, height);
        for (int y = 0; y < height; y++)
        {
            var row = outputImage.GetPixelRowSpan(y);
            for (int x = 0; x < width; x++)
            {
                row[x] = new Rgb24(rOut[x, y], gOut[x, y], bOut[x, y]);
            }
        }

        outputImage.Save(outputPath);
        Console.WriteLine("Wymuszenie GC...");
        GC.Collect(2, GCCollectionMode.Forced, true, true);
        GC.WaitForPendingFinalizers();
        GC.Collect();

        Console.WriteLine("Koniec testu.");

    }
}
