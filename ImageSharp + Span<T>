using System;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;
using System.IO;

class Program
{
    static void Main()
    {
        string inputPath = "test.jpg";
        string outputPath = "output_managed.jpg";

        FilterImageWithManagedMemory(inputPath, outputPath);
    }

    static void FilterImageWithManagedMemory(string inputPath, string outputPath)
    {
        using var image = Image.Load<Rgb24>(inputPath);
        int width = image.Width;
        int height = image.Height;

        byte[,] red = new byte[width, height];
        byte[,] green = new byte[width, height];
        byte[,] blue = new byte[width, height];

        // Wype≈Çniamy tablice danymi z obrazu
        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                var pixel = image[x, y];
                red[x, y] = pixel.R;
                green[x, y] = pixel.G;
                blue[x, y] = pixel.B;
            }
        }
        float[,] filter = new float[5, 5]
        {
            {1, 1, 1, 1, 1},
            {1, 2, 2, 2, 1},
            {1, 2, 3, 2, 1},
            {1, 2, 2, 2, 1},
            {1, 1, 1, 1, 1}
        };
        float sum = 0;
        foreach (var f in filter) sum += f;
        for (int fy = 0; fy < 5; fy++)
            for (int fx = 0; fx < 5; fx++)
                filter[fy, fx] /= sum;
        byte[,] redOut = new byte[width, height];
        byte[,] greenOut = new byte[width, height];
        byte[,] blueOut = new byte[width, height];

        for (int y = 2; y < height - 2; y++)
        {
            for (int x = 2; x < width - 2; x++)
            {
                float r = 0, g = 0, b = 0;

                for (int fy = 0; fy < 5; fy++)
                {
                    for (int fx = 0; fx < 5; fx++)
                    {
                        int ix = x + fx - 2;
                        int iy = y + fy - 2;
                        float coeff = filter[fy, fx];
                        r += red[ix, iy] * coeff;
                        g += green[ix, iy] * coeff;
                        b += blue[ix, iy] * coeff;
                    }
                }

                redOut[x, y] = Clamp(r);
                greenOut[x, y] = Clamp(g);
                blueOut[x, y] = Clamp(b);
            }
        }
        using var result = new Image<Rgb24>(width, height);
        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                result[x, y] = new Rgb24(redOut[x, y], greenOut[x, y], blueOut[x, y]);
            }
        }

        result.Save(outputPath);
        Console.WriteLine("Zapisano obraz z przetwarzaniem w managed memory.");
    }
    static byte Clamp(float val) => (byte)Math.Max(0, Math.Min(255, val));
}
